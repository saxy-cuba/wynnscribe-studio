/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        idToken?: string;
                    };
                };
            };
            responses: {
                /** @description ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** export translations */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ExportTranslation"];
                };
            };
            responses: {
                /** @description export translations (Response structure might vary) */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Language"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/languages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description get all languages */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Language"][];
                    };
                };
            };
        };
        put?: never;
        /** add new language */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LanguageCreate"];
                };
            };
            responses: {
                /** @description create a new language */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Language"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/languages/{languageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get language by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the language to get */
                    languageId: components["schemas"]["LanguageId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description get language by id */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Language"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** delete language */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the language to delete */
                    languageId: components["schemas"]["LanguageId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description delete language */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Language"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get projects */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description get all projects */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Project"][];
                    };
                };
            };
        };
        put?: never;
        /** add new project */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ProjectCreate"];
                };
            };
            responses: {
                /** @description create a new project */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Project"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get project by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the project to get */
                    projectId: components["schemas"]["ProjectId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description get project by id */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Project"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** delete project */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the project to delete */
                    projectId: components["schemas"]["ProjectId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description delete project */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Project"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** update project */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the project to update */
                    projectId: components["schemas"]["ProjectId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ProjectUpdate"];
                };
            };
            responses: {
                /** @description update project */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Project"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v1/projects/{projectId}/originals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get originals */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the project */
                    projectId: components["schemas"]["ProjectId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description get all originals */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Original"][];
                    };
                };
            };
        };
        put?: never;
        /** add new original */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the project */
                    projectId: components["schemas"]["ProjectId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["OriginalCreate"];
                };
            };
            responses: {
                /** @description create a new original */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Original"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/originals/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get originals with translations */
        get: {
            parameters: {
                query: {
                    limit: number;
                    offset: number;
                    lang: string;
                };
                header?: never;
                path: {
                    /** @description ID of the project */
                    projectId: components["schemas"]["ProjectId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description get all originals with translations */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OriginalDetails"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/originals/{originalId}/translations/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get originals with translations */
        get: {
            parameters: {
                query: {
                    lang: string;
                };
                header?: never;
                path: {
                    /** @description ID of the original to get */
                    originalId: components["schemas"]["OriginalId"];
                    /** @description ID of the project */
                    projectId: components["schemas"]["ProjectId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description get all originals with translations */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TranslationDetails"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/originals/{originalId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** delete original */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the project */
                    projectId: components["schemas"]["ProjectId"];
                    /** @description ID of the original to delete */
                    originalId: components["schemas"]["OriginalId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description delete original */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Original"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** update original */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the project */
                    projectId: components["schemas"]["ProjectId"];
                    /** @description ID of the original to update */
                    originalId: components["schemas"]["OriginalId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["OriginalUpdate"];
                };
            };
            responses: {
                /** @description update original */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Original"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v1/projects/{projectId}/originals/{originalId}/translations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** add new translation */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the project */
                    projectId: components["schemas"]["ProjectId"];
                    /** @description ID of the original */
                    originalId: components["schemas"]["OriginalId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TranslationCreate"];
                };
            };
            responses: {
                /** @description create a new translation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Translation"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/originals/translations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** add multiple translations in batch */
        post: {
            parameters: {
                query: {
                    /** @description ID of the language */
                    lang: components["schemas"]["LanguageId"];
                };
                header?: never;
                path: {
                    /** @description ID of the project */
                    projectId: components["schemas"]["ProjectId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TranslationCreateMany"][];
                };
            };
            responses: {
                /** @description translations created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/originals/{originalId}/translations/{translationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** delete translation */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the project */
                    projectId: components["schemas"]["ProjectId"];
                    /** @description ID of the original */
                    originalId: components["schemas"]["OriginalId"];
                    /** @description ID of the translation to delete */
                    translationId: components["schemas"]["TranslationId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description delete translation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Translation"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/originals/{originalId}/translations/{translationId}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** update translation status */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the project */
                    projectId: components["schemas"]["ProjectId"];
                    /** @description ID of the original */
                    originalId: components["schemas"]["OriginalId"];
                    /** @description ID of the translation to update */
                    translationId: components["schemas"]["TranslationId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TranslationUpdateStatus"];
                };
            };
            responses: {
                /** @description update translation status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Translation"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v1/projects/{projectId}/originals/{originalId}/translations/{translationId}/votes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** add new vote */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the project */
                    projectId: components["schemas"]["ProjectId"];
                    /** @description ID of the original */
                    originalId: components["schemas"]["OriginalId"];
                    /** @description ID of the translation */
                    translationId: components["schemas"]["TranslationId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["VoteCreate"];
                };
            };
            responses: {
                /** @description create a new vote */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Vote"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Format: int64
         * @description @JvmInline value class ProjectId(val value: Long)
         */
        ProjectId: number;
        /** @description @JvmInline value class UserId(val value: String) */
        UserId: string;
        Project: {
            id: components["schemas"]["ProjectId"];
            name: string;
            description: string;
            filterId: components["schemas"]["FilterId"];
        };
        ProjectUpdate: {
            name: string;
            description: string;
            filter?: components["schemas"]["FilterUpdate"];
        };
        ProjectCreate: {
            name: string;
            description: string;
            filter?: components["schemas"]["FilterCreate"];
        };
        /**
         * Format: int64
         * @description @JvmInline value class FilterId(val value: Long)
         */
        FilterId: number;
        Filter: {
            id: components["schemas"]["FilterId"];
            type?: components["schemas"]["FilterContent"];
            title?: components["schemas"]["FilterContent"];
            content?: components["schemas"]["FilterContent"];
        };
        FilterCreate: {
            type?: components["schemas"]["FilterContentCreate"];
            title?: components["schemas"]["FilterContentCreate"];
            content?: components["schemas"]["FilterContentCreate"];
        };
        FilterUpdate: {
            type?: components["schemas"]["FilterContentUpdate"];
            title?: components["schemas"]["FilterContentUpdate"];
            content?: components["schemas"]["FilterContentUpdate"];
        };
        FilterContent: {
            content: string;
            withColors: boolean;
            fullMatch: boolean;
        };
        FilterContentCreate: {
            content: string;
            withColors: boolean;
            fullMatch: boolean;
        };
        FilterContentUpdate: {
            content: string;
            withColors: boolean;
            fullMatch: boolean;
        };
        /**
         * Format: int64
         * @description @JvmInline value class OriginalId(val value: Long)
         */
        OriginalId: number;
        /** @description @JvmInline value class OriginalText(val value: String) */
        OriginalText: string;
        /** @description @JvmInline value class Template(val value: String) */
        Template: string | null;
        /** @enum {string} */
        OriginalType: "UserInterface" | "GameItem" | "Chat" | "Conversation";
        Original: {
            id: components["schemas"]["OriginalId"];
            text: components["schemas"]["OriginalText"];
            stopOnMatch: boolean;
            template?: components["schemas"]["Template"];
            filterId: components["schemas"]["FilterId"];
            parentId?: components["schemas"]["OriginalId"];
            projectId: components["schemas"]["ProjectId"];
            type: components["schemas"]["OriginalType"];
        };
        OriginalUpdate: {
            text: components["schemas"]["OriginalText"];
            stopOnMatch: boolean;
            template?: components["schemas"]["Template"];
            type: components["schemas"]["OriginalType"];
            filter?: components["schemas"]["FilterUpdate"];
        };
        OriginalCreate: {
            text: components["schemas"]["OriginalText"];
            stopOnMatch: boolean;
            template?: components["schemas"]["Template"];
            children?: components["schemas"]["OriginalCreate"][] | null;
            filter?: components["schemas"]["FilterCreate"];
            parentId?: components["schemas"]["OriginalId"];
            type: components["schemas"]["OriginalType"];
        };
        OriginalDetails: {
            id: components["schemas"]["OriginalId"];
            text: components["schemas"]["OriginalText"];
            stopOnMatch: boolean;
            template?: components["schemas"]["Template"];
            projectId: components["schemas"]["ProjectId"];
            children: components["schemas"]["OriginalDetails"][];
            bestTranslation?: components["schemas"]["TranslationDetails"];
            type: components["schemas"]["OriginalType"];
            parentId?: components["schemas"]["OriginalId"];
        };
        /**
         * Format: int64
         * @description @JvmInline value class TranslationId(val value: Long)
         */
        TranslationId: number;
        /** @description @JvmInline value class TranslatedText(val value: String) */
        TranslatedText: string;
        /** @description @JvmInline value class LanguageId(val value: String) */
        LanguageId: string;
        Language: {
            id: components["schemas"]["LanguageId"];
            name: string;
            englishName: string;
            emoji: string;
            color: string;
        };
        LanguageCreate: {
            id: components["schemas"]["LanguageId"];
            name: string;
            englishName: string;
            emoji: string;
            color: string;
        };
        Translation: {
            id: components["schemas"]["TranslationId"];
            originalId: components["schemas"]["OriginalId"];
            text: components["schemas"]["TranslatedText"];
            languageId: components["schemas"]["LanguageId"];
            userId: components["schemas"]["UserId"];
            status: components["schemas"]["TranslationStatus"];
        };
        TranslationUpdateStatus: {
            status: components["schemas"]["TranslationStatus"];
        };
        TranslationDetails: {
            id: components["schemas"]["TranslationId"];
            originalId: components["schemas"]["OriginalId"];
            text: components["schemas"]["TranslatedText"];
            languageId: components["schemas"]["LanguageId"];
            userId: components["schemas"]["UserId"];
            status: components["schemas"]["TranslationStatus"];
            votes: components["schemas"]["VoteDetails"][];
        };
        TranslationCreate: {
            text: components["schemas"]["TranslatedText"];
        };
        TranslationCreateMany: {
            originalId: components["schemas"]["OriginalId"];
            text: components["schemas"]["TranslatedText"];
        };
        VoteDetails: {
            userId: components["schemas"]["UserId"];
            type: components["schemas"]["VoteType"];
            translationId: components["schemas"]["TranslationId"];
        };
        Vote: {
            userId: components["schemas"]["UserId"];
            translationId: components["schemas"]["TranslationId"];
            type: components["schemas"]["VoteType"];
        };
        VoteCreate: {
            type: components["schemas"]["VoteType"];
        };
        ExportTranslation: {
            format: string;
        };
        /** @enum {string} */
        VoteType: "Up" | "Down";
        /** @enum {string} */
        TranslationStatus: "Accepted" | "Rejected" | "Pending" | "NeedsReview";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
